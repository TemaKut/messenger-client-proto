// source: response.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var user_user_pb = require('./user/user_pb.js');
goog.object.extend(proto, user_user_pb);
goog.exportSymbol('proto.messenger.Error', null, global);
goog.exportSymbol('proto.messenger.Errors', null, global);
goog.exportSymbol('proto.messenger.Response', null, global);
goog.exportSymbol('proto.messenger.Response.SourceCase', null, global);
goog.exportSymbol('proto.messenger.Success', null, global);
goog.exportSymbol('proto.messenger.Success.DataCase', null, global);
goog.exportSymbol('proto.messenger.UserRegisterResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.messenger.Response.oneofGroups_);
};
goog.inherits(proto.messenger.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.Response.displayName = 'proto.messenger.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.Errors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.messenger.Errors.repeatedFields_, null);
};
goog.inherits(proto.messenger.Errors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.Errors.displayName = 'proto.messenger.Errors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.Error.displayName = 'proto.messenger.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.messenger.Success.oneofGroups_);
};
goog.inherits(proto.messenger.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.Success.displayName = 'proto.messenger.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.UserRegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.UserRegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.UserRegisterResponse.displayName = 'proto.messenger.UserRegisterResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.messenger.Response.oneofGroups_ = [[11,12]];

/**
 * @enum {number}
 */
proto.messenger.Response.SourceCase = {
  SOURCE_NOT_SET: 0,
  ERRORS: 11,
  SUCCESS: 12
};

/**
 * @return {proto.messenger.Response.SourceCase}
 */
proto.messenger.Response.prototype.getSourceCase = function() {
  return /** @type {proto.messenger.Response.SourceCase} */(jspb.Message.computeOneofCase(this, proto.messenger.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
errors: (f = msg.getErrors()) && proto.messenger.Errors.toObject(includeInstance, f),
success: (f = msg.getSuccess()) && proto.messenger.Success.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.Response}
 */
proto.messenger.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.Response;
  return proto.messenger.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.Response}
 */
proto.messenger.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 11:
      var value = new proto.messenger.Errors;
      reader.readMessage(value,proto.messenger.Errors.deserializeBinaryFromReader);
      msg.setErrors(value);
      break;
    case 12:
      var value = new proto.messenger.Success;
      reader.readMessage(value,proto.messenger.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getErrors();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.messenger.Errors.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.messenger.Success.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.messenger.Response.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.messenger.Response} returns this
 */
proto.messenger.Response.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Errors errors = 11;
 * @return {?proto.messenger.Errors}
 */
proto.messenger.Response.prototype.getErrors = function() {
  return /** @type{?proto.messenger.Errors} */ (
    jspb.Message.getWrapperField(this, proto.messenger.Errors, 11));
};


/**
 * @param {?proto.messenger.Errors|undefined} value
 * @return {!proto.messenger.Response} returns this
*/
proto.messenger.Response.prototype.setErrors = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.messenger.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Response} returns this
 */
proto.messenger.Response.prototype.clearErrors = function() {
  return this.setErrors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Response.prototype.hasErrors = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Success success = 12;
 * @return {?proto.messenger.Success}
 */
proto.messenger.Response.prototype.getSuccess = function() {
  return /** @type{?proto.messenger.Success} */ (
    jspb.Message.getWrapperField(this, proto.messenger.Success, 12));
};


/**
 * @param {?proto.messenger.Success|undefined} value
 * @return {!proto.messenger.Response} returns this
*/
proto.messenger.Response.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.messenger.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Response} returns this
 */
proto.messenger.Response.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Response.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.messenger.Errors.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.Errors.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.Errors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.Errors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Errors.toObject = function(includeInstance, msg) {
  var f, obj = {
errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.messenger.Error.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.Errors}
 */
proto.messenger.Errors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.Errors;
  return proto.messenger.Errors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.Errors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.Errors}
 */
proto.messenger.Errors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.messenger.Error;
      reader.readMessage(value,proto.messenger.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.Errors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.Errors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.Errors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Errors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.messenger.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.messenger.Error>}
 */
proto.messenger.Errors.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.messenger.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.messenger.Error, 1));
};


/**
 * @param {!Array<!proto.messenger.Error>} value
 * @return {!proto.messenger.Errors} returns this
*/
proto.messenger.Errors.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.messenger.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.messenger.Error}
 */
proto.messenger.Errors.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.messenger.Error, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.messenger.Errors} returns this
 */
proto.messenger.Errors.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Error.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.Error}
 */
proto.messenger.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.Error;
  return proto.messenger.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.Error}
 */
proto.messenger.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.messenger.Success.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.messenger.Success.DataCase = {
  DATA_NOT_SET: 0,
  USER_REGISTER: 1
};

/**
 * @return {proto.messenger.Success.DataCase}
 */
proto.messenger.Success.prototype.getDataCase = function() {
  return /** @type {proto.messenger.Success.DataCase} */(jspb.Message.computeOneofCase(this, proto.messenger.Success.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
userRegister: (f = msg.getUserRegister()) && proto.messenger.UserRegisterResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.Success}
 */
proto.messenger.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.Success;
  return proto.messenger.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.Success}
 */
proto.messenger.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.messenger.UserRegisterResponse;
      reader.readMessage(value,proto.messenger.UserRegisterResponse.deserializeBinaryFromReader);
      msg.setUserRegister(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserRegister();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.messenger.UserRegisterResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserRegisterResponse user_register = 1;
 * @return {?proto.messenger.UserRegisterResponse}
 */
proto.messenger.Success.prototype.getUserRegister = function() {
  return /** @type{?proto.messenger.UserRegisterResponse} */ (
    jspb.Message.getWrapperField(this, proto.messenger.UserRegisterResponse, 1));
};


/**
 * @param {?proto.messenger.UserRegisterResponse|undefined} value
 * @return {!proto.messenger.Success} returns this
*/
proto.messenger.Success.prototype.setUserRegister = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.messenger.Success.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Success} returns this
 */
proto.messenger.Success.prototype.clearUserRegister = function() {
  return this.setUserRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Success.prototype.hasUserRegister = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.UserRegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.UserRegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.UserRegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserRegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
user: (f = msg.getUser()) && user_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.UserRegisterResponse}
 */
proto.messenger.UserRegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.UserRegisterResponse;
  return proto.messenger.UserRegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.UserRegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.UserRegisterResponse}
 */
proto.messenger.UserRegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_user_pb.User;
      reader.readMessage(value,user_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.UserRegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.UserRegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.UserRegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserRegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional user.User user = 1;
 * @return {?proto.messenger.user.User}
 */
proto.messenger.UserRegisterResponse.prototype.getUser = function() {
  return /** @type{?proto.messenger.user.User} */ (
    jspb.Message.getWrapperField(this, user_user_pb.User, 1));
};


/**
 * @param {?proto.messenger.user.User|undefined} value
 * @return {!proto.messenger.UserRegisterResponse} returns this
*/
proto.messenger.UserRegisterResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.UserRegisterResponse} returns this
 */
proto.messenger.UserRegisterResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.UserRegisterResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.messenger);

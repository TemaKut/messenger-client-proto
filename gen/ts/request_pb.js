// source: request.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var chat_peer_pb = require('./chat/peer_pb.js');
goog.object.extend(proto, chat_peer_pb);
goog.exportSymbol('proto.messenger.ChannelCreateRequest', null, global);
goog.exportSymbol('proto.messenger.ChannelRequest', null, global);
goog.exportSymbol('proto.messenger.Request', null, global);
goog.exportSymbol('proto.messenger.Request.DataCase', null, global);
goog.exportSymbol('proto.messenger.UserAuthorizeEmailCredential', null, global);
goog.exportSymbol('proto.messenger.UserAuthorizeRequest', null, global);
goog.exportSymbol('proto.messenger.UserAuthorizeRequest.CredentialsCase', null, global);
goog.exportSymbol('proto.messenger.UserRegisterRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.messenger.Request.oneofGroups_);
};
goog.inherits(proto.messenger.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.Request.displayName = 'proto.messenger.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.UserRegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.UserRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.UserRegisterRequest.displayName = 'proto.messenger.UserRegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.UserAuthorizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.messenger.UserAuthorizeRequest.oneofGroups_);
};
goog.inherits(proto.messenger.UserAuthorizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.UserAuthorizeRequest.displayName = 'proto.messenger.UserAuthorizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.UserAuthorizeEmailCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.UserAuthorizeEmailCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.UserAuthorizeEmailCredential.displayName = 'proto.messenger.UserAuthorizeEmailCredential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.ChannelCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.ChannelCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.ChannelCreateRequest.displayName = 'proto.messenger.ChannelCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messenger.ChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messenger.ChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.messenger.ChannelRequest.displayName = 'proto.messenger.ChannelRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.messenger.Request.oneofGroups_ = [[11,12,20,21]];

/**
 * @enum {number}
 */
proto.messenger.Request.DataCase = {
  DATA_NOT_SET: 0,
  USER_REGISTER: 11,
  USER_AUTHORIZE: 12,
  CHANNEL_CREATE: 20,
  CHANNEL: 21
};

/**
 * @return {proto.messenger.Request.DataCase}
 */
proto.messenger.Request.prototype.getDataCase = function() {
  return /** @type {proto.messenger.Request.DataCase} */(jspb.Message.computeOneofCase(this, proto.messenger.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
userRegister: (f = msg.getUserRegister()) && proto.messenger.UserRegisterRequest.toObject(includeInstance, f),
userAuthorize: (f = msg.getUserAuthorize()) && proto.messenger.UserAuthorizeRequest.toObject(includeInstance, f),
channelCreate: (f = msg.getChannelCreate()) && proto.messenger.ChannelCreateRequest.toObject(includeInstance, f),
channel: (f = msg.getChannel()) && proto.messenger.ChannelRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.Request}
 */
proto.messenger.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.Request;
  return proto.messenger.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.Request}
 */
proto.messenger.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 11:
      var value = new proto.messenger.UserRegisterRequest;
      reader.readMessage(value,proto.messenger.UserRegisterRequest.deserializeBinaryFromReader);
      msg.setUserRegister(value);
      break;
    case 12:
      var value = new proto.messenger.UserAuthorizeRequest;
      reader.readMessage(value,proto.messenger.UserAuthorizeRequest.deserializeBinaryFromReader);
      msg.setUserAuthorize(value);
      break;
    case 20:
      var value = new proto.messenger.ChannelCreateRequest;
      reader.readMessage(value,proto.messenger.ChannelCreateRequest.deserializeBinaryFromReader);
      msg.setChannelCreate(value);
      break;
    case 21:
      var value = new proto.messenger.ChannelRequest;
      reader.readMessage(value,proto.messenger.ChannelRequest.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserRegister();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.messenger.UserRegisterRequest.serializeBinaryToWriter
    );
  }
  f = message.getUserAuthorize();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.messenger.UserAuthorizeRequest.serializeBinaryToWriter
    );
  }
  f = message.getChannelCreate();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.messenger.ChannelCreateRequest.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.messenger.ChannelRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.messenger.Request.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.Request} returns this
 */
proto.messenger.Request.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserRegisterRequest user_register = 11;
 * @return {?proto.messenger.UserRegisterRequest}
 */
proto.messenger.Request.prototype.getUserRegister = function() {
  return /** @type{?proto.messenger.UserRegisterRequest} */ (
    jspb.Message.getWrapperField(this, proto.messenger.UserRegisterRequest, 11));
};


/**
 * @param {?proto.messenger.UserRegisterRequest|undefined} value
 * @return {!proto.messenger.Request} returns this
*/
proto.messenger.Request.prototype.setUserRegister = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.messenger.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Request} returns this
 */
proto.messenger.Request.prototype.clearUserRegister = function() {
  return this.setUserRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Request.prototype.hasUserRegister = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional UserAuthorizeRequest user_authorize = 12;
 * @return {?proto.messenger.UserAuthorizeRequest}
 */
proto.messenger.Request.prototype.getUserAuthorize = function() {
  return /** @type{?proto.messenger.UserAuthorizeRequest} */ (
    jspb.Message.getWrapperField(this, proto.messenger.UserAuthorizeRequest, 12));
};


/**
 * @param {?proto.messenger.UserAuthorizeRequest|undefined} value
 * @return {!proto.messenger.Request} returns this
*/
proto.messenger.Request.prototype.setUserAuthorize = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.messenger.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Request} returns this
 */
proto.messenger.Request.prototype.clearUserAuthorize = function() {
  return this.setUserAuthorize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Request.prototype.hasUserAuthorize = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ChannelCreateRequest channel_create = 20;
 * @return {?proto.messenger.ChannelCreateRequest}
 */
proto.messenger.Request.prototype.getChannelCreate = function() {
  return /** @type{?proto.messenger.ChannelCreateRequest} */ (
    jspb.Message.getWrapperField(this, proto.messenger.ChannelCreateRequest, 20));
};


/**
 * @param {?proto.messenger.ChannelCreateRequest|undefined} value
 * @return {!proto.messenger.Request} returns this
*/
proto.messenger.Request.prototype.setChannelCreate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.messenger.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Request} returns this
 */
proto.messenger.Request.prototype.clearChannelCreate = function() {
  return this.setChannelCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Request.prototype.hasChannelCreate = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ChannelRequest channel = 21;
 * @return {?proto.messenger.ChannelRequest}
 */
proto.messenger.Request.prototype.getChannel = function() {
  return /** @type{?proto.messenger.ChannelRequest} */ (
    jspb.Message.getWrapperField(this, proto.messenger.ChannelRequest, 21));
};


/**
 * @param {?proto.messenger.ChannelRequest|undefined} value
 * @return {!proto.messenger.Request} returns this
*/
proto.messenger.Request.prototype.setChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.messenger.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.Request} returns this
 */
proto.messenger.Request.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.Request.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 21) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.UserRegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.UserRegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.UserRegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserRegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
email: jspb.Message.getFieldWithDefault(msg, 3, ""),
password: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.UserRegisterRequest}
 */
proto.messenger.UserRegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.UserRegisterRequest;
  return proto.messenger.UserRegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.UserRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.UserRegisterRequest}
 */
proto.messenger.UserRegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.UserRegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.UserRegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.UserRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserRegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.messenger.UserRegisterRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserRegisterRequest} returns this
 */
proto.messenger.UserRegisterRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.messenger.UserRegisterRequest.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserRegisterRequest} returns this
 */
proto.messenger.UserRegisterRequest.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.messenger.UserRegisterRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserRegisterRequest} returns this
 */
proto.messenger.UserRegisterRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.messenger.UserRegisterRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserRegisterRequest} returns this
 */
proto.messenger.UserRegisterRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.messenger.UserAuthorizeRequest.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.messenger.UserAuthorizeRequest.CredentialsCase = {
  CREDENTIALS_NOT_SET: 0,
  EMAIL: 1
};

/**
 * @return {proto.messenger.UserAuthorizeRequest.CredentialsCase}
 */
proto.messenger.UserAuthorizeRequest.prototype.getCredentialsCase = function() {
  return /** @type {proto.messenger.UserAuthorizeRequest.CredentialsCase} */(jspb.Message.computeOneofCase(this, proto.messenger.UserAuthorizeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.UserAuthorizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.UserAuthorizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.UserAuthorizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserAuthorizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
email: (f = msg.getEmail()) && proto.messenger.UserAuthorizeEmailCredential.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.UserAuthorizeRequest}
 */
proto.messenger.UserAuthorizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.UserAuthorizeRequest;
  return proto.messenger.UserAuthorizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.UserAuthorizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.UserAuthorizeRequest}
 */
proto.messenger.UserAuthorizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.messenger.UserAuthorizeEmailCredential;
      reader.readMessage(value,proto.messenger.UserAuthorizeEmailCredential.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.UserAuthorizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.UserAuthorizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.UserAuthorizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserAuthorizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.messenger.UserAuthorizeEmailCredential.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserAuthorizeEmailCredential email = 1;
 * @return {?proto.messenger.UserAuthorizeEmailCredential}
 */
proto.messenger.UserAuthorizeRequest.prototype.getEmail = function() {
  return /** @type{?proto.messenger.UserAuthorizeEmailCredential} */ (
    jspb.Message.getWrapperField(this, proto.messenger.UserAuthorizeEmailCredential, 1));
};


/**
 * @param {?proto.messenger.UserAuthorizeEmailCredential|undefined} value
 * @return {!proto.messenger.UserAuthorizeRequest} returns this
*/
proto.messenger.UserAuthorizeRequest.prototype.setEmail = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.messenger.UserAuthorizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.UserAuthorizeRequest} returns this
 */
proto.messenger.UserAuthorizeRequest.prototype.clearEmail = function() {
  return this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.UserAuthorizeRequest.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.UserAuthorizeEmailCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.UserAuthorizeEmailCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserAuthorizeEmailCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
email: jspb.Message.getFieldWithDefault(msg, 1, ""),
password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.UserAuthorizeEmailCredential}
 */
proto.messenger.UserAuthorizeEmailCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.UserAuthorizeEmailCredential;
  return proto.messenger.UserAuthorizeEmailCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.UserAuthorizeEmailCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.UserAuthorizeEmailCredential}
 */
proto.messenger.UserAuthorizeEmailCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.UserAuthorizeEmailCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.UserAuthorizeEmailCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.UserAuthorizeEmailCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserAuthorizeEmailCredential} returns this
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.UserAuthorizeEmailCredential} returns this
 */
proto.messenger.UserAuthorizeEmailCredential.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.ChannelCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.ChannelCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.ChannelCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.ChannelCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
title: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.ChannelCreateRequest}
 */
proto.messenger.ChannelCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.ChannelCreateRequest;
  return proto.messenger.ChannelCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.ChannelCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.ChannelCreateRequest}
 */
proto.messenger.ChannelCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.ChannelCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.ChannelCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.ChannelCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.ChannelCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.messenger.ChannelCreateRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.messenger.ChannelCreateRequest} returns this
 */
proto.messenger.ChannelCreateRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messenger.ChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.messenger.ChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messenger.ChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.ChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
peer: (f = msg.getPeer()) && chat_peer_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messenger.ChannelRequest}
 */
proto.messenger.ChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messenger.ChannelRequest;
  return proto.messenger.ChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messenger.ChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messenger.ChannelRequest}
 */
proto.messenger.ChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_peer_pb.Peer;
      reader.readMessage(value,chat_peer_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messenger.ChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messenger.ChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messenger.ChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messenger.ChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_peer_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional chat.Peer peer = 1;
 * @return {?proto.messenger.chat.Peer}
 */
proto.messenger.ChannelRequest.prototype.getPeer = function() {
  return /** @type{?proto.messenger.chat.Peer} */ (
    jspb.Message.getWrapperField(this, chat_peer_pb.Peer, 1));
};


/**
 * @param {?proto.messenger.chat.Peer|undefined} value
 * @return {!proto.messenger.ChannelRequest} returns this
*/
proto.messenger.ChannelRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.messenger.ChannelRequest} returns this
 */
proto.messenger.ChannelRequest.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.messenger.ChannelRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.messenger);
